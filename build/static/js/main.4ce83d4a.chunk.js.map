{"version":3,"sources":["components/Header.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","display","flexDirection","lineHeight","padding","background","Header","props","react_default","a","createElement","id","style","role","aria-label","currentDate","containerStyle","justifyContent","alignItems","locationHeader","letterSpacing","fontFamily","paddingBottom","Weather","_ref","handleChange","handleClick","city","country","unit","toggle","temp","fahrenheit","description","icon","wind","humidity","className","concat","onClick","textAlign","alt","src","type","value","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeUnit","setState","state","isToggleOn","e","target","getWeather","fetch","latitude","longitude","then","response","json","data","name","sys","main","Math","round","isLoading","weather","charAt","toUpperCase","slice","speed","parseFloat","sunrise","Date","getHours","sunset","toString","split","splice","join","catch","error","console","log","getLocation","navigator","geolocation","getCurrentPosition","position","lat","coords","lon","celsius","bind","assertThisInitialized","_this$state","Fragment","components_Header","components_Weather","change","onSearchChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ce83d4a.chunk.js","sourcesContent":["import React from 'react'\n\nconst headerStyle = {\n  display: 'flex',\n  flexDirection: 'row',\n  lineHeight: '40px',\n  padding: '0 1rem',\n  background: 'rgba(0,0,0,0.5)'\n}\n\nconst Header = (props) => {\n  \n    return (\n     \n        <div id=\"header\" style={headerStyle}>\n            <div id=\"logo\">\n                <span>Local Weather App </span>\n                <span role=\"img\" aria-label=\"Sun Behind Small Cloud\">üå§Ô∏è</span>\n            </div>\n             <div id=\"date\">{props.currentDate}</div>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport 'weather-icons/css/weather-icons.css';\n\nconst containerStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  alignItems: 'center'\n}\n\nconst locationHeader = {\n  letterSpacing: '3px',\n  fontFamily: \"'Titillium Web', sans-serif\",\n  paddingBottom: '1rem'\n}\n\n const Weather = ({handleChange, handleClick, city, country, unit, toggle, temp, fahrenheit, description, icon, wind, humidity, }) => {\n    return (\n      <div>\n      {!temp ? (\n          <input id=\"get-weather\" type=\"button\" value=\"Get Weather\" onClick={handleClick} onChange={handleChange} />\n      ) : (\n        <div id=\"container\" style={containerStyle}>\n       <div className=\"weather\">\n         <h1 className='location' style={locationHeader}>{`${city}, ${country}`}</h1>\n          <button \n              onClick={unit}\n              id=\"temp\"\n              style={{textAlign: 'center'}}\n              >{toggle ? temp + '‚ÑÉ' : fahrenheit + '‚Ñâ'}\n          </button>\n          <div id=\"description\">{description}</div>\n            <img id=\"icon\" alt=\"weather-icon\"\n              src={icon} />\n          <div className=\"weather-features\">\n              <span className=\"text\">Humidity: </span><span id=\"humidity\">{humidity}%</span>\n              <span className=\"text\"> Wind: </span><span id=\"wind-speed\">{wind}m/s</span>\n          </div>\n       </div>\n     </div>\n      )}\n      </div>\n    )\n  }\n\n  export default Weather;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Weather from './components/Weather';\nimport 'weather-icons/css/weather-icons.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      city: '',\n      country: '', \n      isToggleOn: true,\n      isLoading: false,\n      icon: '',\n      humidity: '',\n      temp: '',\n      description: '',\n      wind: '',\n      celsius: '',\n      fahrenheit: '',\n      currentDate: '',\n      latitude: null,\n      longitude: null,\n      error: null,\n      coords: ''\n    }\n    this.onChangeUnit = this.onChangeUnit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n   \n  onChangeUnit = () => {\n    this.setState(state => ({\n        isToggleOn: !state.isToggleOn\n    }));\n}\n\n  handleChange = (e) => {\n    this.setState({\n      city: e.target.value\n    });\n}\n\n  getWeather = () => {\n    fetch(`https://fcc-weather-api.glitch.me/api/current?lat=${this.state.latitude}&lon=${this.state.longitude}`)\n    .then(response => response.json())\n    .then(data => \n      this.setState({\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        temp: Math.round(data.main.temp),\n        isLoading: false,\n        description: `${data.weather[0].description.charAt(0).toUpperCase()}${data.weather[0].description.slice(1)}`,\n        icon: data.weather[0].icon,\n        wind: data.wind.speed,\n        fahrenheit: Math.round(parseFloat(data.main.temp) * 1.8 + 32),\n        sunrise: new Date(data.sys.sunrise * 1000).getHours(),\n        sunset: new Date(data.sys.sunset * 1000).getHours(),\n        currentDate: new Date().toString().split(' ').splice(0, 4).join(' '),\n    }))\n    .catch(error => console.log(error));\n  }\n\n  getLocation = () => {\n    if(navigator.geolocation) {\n        const success = position => {\n        const lat = position.coords.latitude;\n        const lon = position.coords.longitude;\n\n        this.setState({\n          latitude: lat,\n          longitude: lon,\n\n        }, () => {\n          this.getWeather();\n        });\n      }\n\n      const error = () => {\n        this.setState({\n          error: 'Unable to retrieve data'\n        });\n      }\n      navigator.geolocation.getCurrentPosition(success, error);\n    }\n  };\n  \n    render() {\n      const { currentDate, temp, fahrenheit, isToggleOn, description, humidity, wind, icon, isLoading, city, country } = this.state;\n\n      return (\n        <div className=\"app\">\n        {isLoading ? (\n          <h1 className=\"loading-info\">Loading...</h1>\n        ) : (\n         <React.Fragment>\n          <Header \n            currentDate={currentDate}\n          />\n            <Weather \n              change={this.onSearchChange}\n              handleClick={this.getLocation}\n              handleChange={this.handleChange}\n              description={description}\n              humidity={humidity}\n              wind={wind}\n              icon={icon}\n              unit={this.onChangeUnit}\n              temp={temp}\n              fahrenheit={fahrenheit}\n              toggle={isToggleOn}\n              city={city}\n              country={country}\n            />\n         </React.Fragment>\n        )}\n        </div>\n      );\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}